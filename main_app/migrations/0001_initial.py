# Generated by Django 5.2.1 on 2025-05-15 15:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('duration', models.IntegerField(help_text='Duration in minutes')),
                ('category', models.CharField(choices=[('beauty_hair', 'Beauty - Hair'), ('beauty_nails', 'Beauty - Nails'), ('beauty_makeup', 'Beauty - Makeup'), ('beauty_skin', 'Beauty - Skin'), ('cleaning_tidy', 'Cleaning - Tidy Up'), ('cleaning_deep', 'Cleaning - Deep Clean'), ('pet_care_walk', 'Pet Care - Dog Walk'), ('pet_care_sit', 'Pet Care - Petsit'), ('car_care_wash', 'Car Care - Wash/Wax'), ('car_care_detail', 'Car Care - Detail'), ('errands', 'Errands'), ('handyman', 'Handyman')], default='beauty', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('provider', 'Service Provider'), ('consumer', 'Service Consumer')], max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('address', models.TextField(blank=True)),
                ('street_address', models.CharField(blank=True, max_length=100)),
                ('apartment', models.CharField(blank=True, max_length=50)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('state', models.CharField(blank=True, max_length=20)),
                ('zip_code', models.CharField(blank=True, max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('address_line1', models.CharField(blank=True, max_length=100, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, max_length=20, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, default='United States', max_length=50, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_reason', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consumer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='main_app.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=100)),
                ('business_description', models.TextField()),
                ('business_hours', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('address_line1', models.CharField(default='', max_length=255)),
                ('address_line2', models.CharField(default='', max_length=255)),
                ('city', models.CharField(default='', max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('postal_code', models.CharField(default='', max_length=20)),
                ('country', models.CharField(default='United States', max_length=100)),
                ('service_radius', models.FloatField(default=10.0)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='main_app.serviceprovider'),
        ),
        migrations.CreateModel(
            name='ProximityDiscountConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tier1_distance', models.IntegerField(default=200)),
                ('tier2_min_distance', models.IntegerField(default=200)),
                ('tier2_max_distance', models.IntegerField(default=600)),
                ('tier3_min_distance', models.IntegerField(default=600)),
                ('tier3_max_distance', models.IntegerField(default=1760)),
                ('tier4_min_distance', models.IntegerField(default=1760)),
                ('tier4_max_distance', models.IntegerField(default=5280)),
                ('tier1_1appt_discount', models.IntegerField(default=15)),
                ('tier1_2appt_discount', models.IntegerField(default=20)),
                ('tier1_3appt_discount', models.IntegerField(default=25)),
                ('tier1_4appt_discount', models.IntegerField(default=30)),
                ('tier1_5appt_discount', models.IntegerField(default=35)),
                ('tier2_1appt_discount', models.IntegerField(default=12)),
                ('tier2_2appt_discount', models.IntegerField(default=15)),
                ('tier2_3appt_discount', models.IntegerField(default=18)),
                ('tier2_4appt_discount', models.IntegerField(default=21)),
                ('tier2_5appt_discount', models.IntegerField(default=24)),
                ('tier3_1appt_discount', models.IntegerField(default=10)),
                ('tier3_2appt_discount', models.IntegerField(default=11)),
                ('tier3_3appt_discount', models.IntegerField(default=12)),
                ('tier3_4appt_discount', models.IntegerField(default=13)),
                ('tier3_5appt_discount', models.IntegerField(default=14)),
                ('tier4_1appt_discount', models.IntegerField(default=5)),
                ('tier4_2appt_discount', models.IntegerField(default=6)),
                ('tier4_3appt_discount', models.IntegerField(default=7)),
                ('tier4_4appt_discount', models.IntegerField(default=8)),
                ('tier4_5appt_discount', models.IntegerField(default=9)),
                ('provider', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='discount_config', to='main_app.serviceprovider')),
            ],
        ),
        migrations.CreateModel(
            name='ProviderAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(max_length=10)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='main_app.serviceprovider')),
            ],
            options={
                'unique_together': {('provider', 'day_of_week', 'start_time')},
            },
        ),
    ]
